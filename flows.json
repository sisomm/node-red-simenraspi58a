[
    {
        "id": "5f06c812fee9c317",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2a5249aff8f14129",
        "type": "mqtt-broker",
        "name": "mosquitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0199640dc61c098f",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "dvdrental",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "",
        "passwordFieldType": "str"
    },
    {
        "id": "bfae8a9a49c39d11",
        "type": "postgreSQLConfig",
        "name": "simen",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "simen",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "postgres",
        "passwordFieldType": "str"
    },
    {
        "id": "a6255b8d1e792fdc",
        "type": "amqp-broker",
        "name": "local",
        "host": "localhost",
        "port": "5672",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "a3344482a15476b7",
        "type": "rpi-sensehat in",
        "z": "5f06c812fee9c317",
        "name": "",
        "motion": false,
        "env": true,
        "stick": true,
        "x": 120,
        "y": 100,
        "wires": [
            [
                "b943078cba63ef0f"
            ]
        ]
    },
    {
        "id": "174adf6316713cc4",
        "type": "postgresql",
        "z": "5f06c812fee9c317",
        "name": "",
        "query": "",
        "postgreSQLConfig": "bfae8a9a49c39d11",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 830,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b943078cba63ef0f",
        "type": "delay",
        "z": "5f06c812fee9c317",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 100,
        "wires": [
            [
                "c06ebbb373fcdab1"
            ]
        ]
    },
    {
        "id": "d45d370b675d74c3",
        "type": "debug",
        "z": "5f06c812fee9c317",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 380,
        "wires": []
    },
    {
        "id": "5c6fb2fe3b8ecb6e",
        "type": "amqp-out",
        "z": "5f06c812fee9c317",
        "name": "",
        "broker": "a6255b8d1e792fdc",
        "reconnectOnError": false,
        "exchangeName": "",
        "exchangeType": "topic",
        "exchangeRoutingKey": "hello",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "6326c7b5adc2fe2e",
        "type": "amqp-in",
        "z": "5f06c812fee9c317",
        "name": "",
        "broker": "a6255b8d1e792fdc",
        "prefetch": 0,
        "reconnectOnError": false,
        "noAck": false,
        "exchangeName": "",
        "exchangeType": "topic",
        "exchangeRoutingKey": "hello",
        "exchangeDurable": false,
        "queueName": "hello",
        "queueType": "classic",
        "queueExclusive": false,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "c1b6c2e71a10237b"
            ]
        ]
    },
    {
        "id": "c06ebbb373fcdab1",
        "type": "function",
        "z": "5f06c812fee9c317",
        "name": "addtime",
        "func": "var d = new Date();\nvar newrec={};\nnewrec.datepart=d.toISOString();\nnewrec.measpart=msg.payload;\n\nmsg.payload=newrec;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            [
                "5c6fb2fe3b8ecb6e"
            ]
        ]
    },
    {
        "id": "c1b6c2e71a10237b",
        "type": "function",
        "z": "5f06c812fee9c317",
        "name": "splitmessage",
        "func": "msg.query = \"INSERT INTO environment (mtime, measurement) values ($1,$2)\";\nmsg.params = [msg.payload.datepart, msg.payload.measpart];\n\n//Remember the values in the flow variable in case of errors\nflow.set('datepart',msg.payload.datepart);\nflow.set('measpart',msg.payload.measpart);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "174adf6316713cc4"
            ]
        ]
    },
    {
        "id": "251ca1b8d6822047",
        "type": "catch",
        "z": "5f06c812fee9c317",
        "name": "",
        "scope": [
            "174adf6316713cc4"
        ],
        "uncaught": false,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "d45d370b675d74c3",
                "6e5c646b5973b111"
            ]
        ]
    },
    {
        "id": "55843b99fc0f43e5",
        "type": "delay",
        "z": "5f06c812fee9c317",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 280,
        "wires": [
            [
                "5c6fb2fe3b8ecb6e"
            ]
        ]
    },
    {
        "id": "6e5c646b5973b111",
        "type": "function",
        "z": "5f06c812fee9c317",
        "name": "retrieve_values",
        "func": "var newrec = {};\nnewrec.datepart = flow.get('datepart');\nnewrec.measpart = flow.get('measpart');\n\nmsg.payload = newrec;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "55843b99fc0f43e5"
            ]
        ]
    },
    {
        "id": "aa6a3416c4ba458c",
        "type": "comment",
        "z": "5f06c812fee9c317",
        "name": "what is going on",
        "info": "# the logic\nis that we use a queue to store the \nreadings in postgres, since if the \ndatabase is down, we can put the readings back\non the queue via that error handling",
        "x": 1020,
        "y": 280,
        "wires": []
    }
]